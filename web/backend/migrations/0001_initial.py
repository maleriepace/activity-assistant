# Generated by Django 3.1.1 on 2020-09-22 09:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Algorithm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=40)),
                ('class_name', models.CharField(blank=True, max_length=40)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('multiple_person', models.BooleanField(default=False)),
                ('unsupervised', models.BooleanField(default=False)),
                ('synthetic_activities', models.BooleanField(default=False)),
                ('location', models.BooleanField(default=False)),
                ('duration', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DataInstance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('data_rep', models.CharField(max_length=40)),
                ('timeslicelength', models.CharField(max_length=40)),
                ('test_sel', models.CharField(max_length=40, null=True)),
                ('data_file', models.FileField(null=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, null=True)),
                ('class_name', models.CharField(max_length=40, null=True)),
                ('path_to_folder', models.FilePathField(null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('state', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.IntegerField()),
                ('x', models.IntegerField()),
                ('y', models.IntegerField()),
                ('name', models.CharField(max_length=40)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(null=True, upload_to='')),
                ('visualization', models.ImageField(null=True, upload_to='')),
                ('train_loss', models.FileField(null=True, upload_to='')),
                ('train_loss_graph', models.ImageField(null=True, upload_to='')),
                ('algorithm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.algorithm')),
                ('datainstance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datainstance', to='backend.datainstance')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dataset', to='backend.dataset')),
            ],
        ),
        migrations.CreateModel(
            name='ModelComparision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(blank=True, default='', max_length=100)),
                ('prediction', models.BooleanField(blank=True, default=False)),
                ('predicted_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_predicted', to='backend.location')),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='RealTimeNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pid', models.IntegerField(default=0)),
                ('status', models.CharField(max_length=10, null=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.model')),
            ],
        ),
        migrations.CreateModel(
            name='Benchmark',
            fields=[
                ('model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='backend.model')),
                ('df_conf_mat', models.FileField(null=True, upload_to='')),
                ('df_metrics', models.FileField(null=True, upload_to='')),
                ('df_class_acts', models.FileField(null=True, upload_to='')),
                ('img_feature_importance', models.ImageField(null=True, upload_to='')),
                ('img_act_dur_dists', models.ImageField(null=True, upload_to='')),
                ('img_inf_states', models.ImageField(null=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='SyntheticActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField()),
                ('start', models.TimeField()),
                ('end', models.TimeField()),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='synthetic_activities', to='backend.person')),
                ('synthetic_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='syntheticactivity_predicted', to='backend.activity')),
            ],
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_address', models.CharField(max_length=40, null=True)),
                ('hass_address', models.CharField(max_length=40, null=True)),
                ('hass_api_token', models.CharField(max_length=200, null=True)),
                ('realtime_node', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.realtimenode')),
                ('selected_algorithm', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='algorithm', to='backend.algorithm')),
                ('selected_dataset', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.dataset')),
                ('selected_model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='model', to='backend.model')),
            ],
        ),
        migrations.AddField(
            model_name='model',
            name='person',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.person'),
        ),
        migrations.CreateModel(
            name='Edge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(default=0)),
                ('sink', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.location')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source', to='backend.location')),
            ],
            options={
                'ordering': ['source'],
            },
        ),
        migrations.CreateModel(
            name='DevicePrediction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('predicted_state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='deviceprediction_predicted', to='backend.device')),
                ('rt_node', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='predicted_devices', to='backend.realtimenode')),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='component',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.devicecomponent'),
        ),
        migrations.AddField(
            model_name='device',
            name='location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.location'),
        ),
        migrations.AddField(
            model_name='datainstance',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.dataset'),
        ),
        migrations.AddField(
            model_name='algorithm',
            name='compatible_dataset',
            field=models.ManyToManyField(related_name='compatible_dataset', to='backend.Dataset'),
        ),
        migrations.AddField(
            model_name='algorithm',
            name='selected_dataset',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='selected_dataset', to='backend.dataset'),
        ),
        migrations.AddField(
            model_name='algorithm',
            name='selected_person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.person'),
        ),
        migrations.CreateModel(
            name='ActivityPrediction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='predicted_activities', to='backend.person')),
                ('predicted_activity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activityprediction_predicted', to='backend.activity')),
            ],
        ),
        migrations.AddField(
            model_name='activity',
            name='locations',
            field=models.ManyToManyField(related_name='activities', to='backend.Location'),
        ),
        migrations.CreateModel(
            name='Smartphone',
            fields=[
                ('name', models.CharField(max_length=40)),
                ('logging', models.BooleanField(default=False)),
                ('synchronized', models.BooleanField(default=False)),
                ('person', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='backend.person')),
                ('logged_activity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='smartphone_logged', to='backend.activity')),
                ('logged_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='smartphone_logged', to='backend.location')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='smartphones', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
    ]
